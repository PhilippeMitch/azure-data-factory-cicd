name: azure-data-factory-cicd-project

on:
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install ADF Utilities package
        run: npm install
        working-directory: ${{ github.workspace }}/build

      - name: Validate ADF resources
        run: npm run build validate ${{ github.workspace }}/ /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/MLOps/providers/Microsoft.DataFactory/factories/dev-mitch-adf-cicd
        working-directory: ${{ github.workspace }}/build

      - name: Validate and Generate ARM template
        run: npm run build export ${{ github.workspace }}/ /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/MLOps/providers/Microsoft.DataFactory/factories/dev-mitch-adf-cicd ExportedArmTemplate --global-parameters
        working-directory: ${{ github.workspace }}/build

      - name: Upload ARM template artifact
        uses: actions/upload-artifact@v4
        with:
          name: ExportedArmTemplate
          path: ${{ github.workspace }}/build/ExportedArmTemplate

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target Data Factory name
        id: set-target
        run: |
          echo "Listing secrets name:"
          echo "storage_name=${{ secrets.STORAGE_NAME }}"
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is empty or not set"
            exit 1
          else
            echo "✅ AZURE_CLIENT_ID is set"
          fi
    
          echo "Client ID=${{ secrets.AZURE_CLIENT_ID }}"
          echo "Tenant ID=${{ secrets.AZURE_TENANT_ID }}"
          echo "Subscription=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "data_factory_name=prod-mitch-adf-cicd" >> $GITHUB_OUTPUT
            echo "storage_name=${{ secrets.STORAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "container_name=${{ secrets.CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "data_factory_name=dev-mitch-adf-cicd" >> $GITHUB_OUTPUT
            echo "storage_name=${{ secrets.STORAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "container_name=${{ secrets.CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ExportedArmTemplate

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Debug deployment values
        run: |
          echo "Factory Name: ${{ steps.set-target.outputs.data_factory_name }}"

      - name: Debug ARM template
        run: |
          echo "=== ARMTemplateParametersForFactory.json ==="
          cat ARMTemplateParametersForFactory.json
          echo "=== GlobalParameters.json (if exists) ==="
          if [ -f *_GlobalParameters.json ]; then
            ls -la *_GlobalParameters.json
            cat *_GlobalParameters.json
          fi

      - name: Deploy to Data Factory
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: DataOps
          dataFactoryName: ${{ steps.set-target.outputs.data_factory_name }}
          armTemplateFile: ARMTemplateForFactory.json
          armTemplateParametersFile: ARMTemplateParametersForFactory.json
          additionalParameters: |
            factoryName=${{ steps.set-target.outputs.data_factory_name }}

      # Prepare global parameters based on environment
      - name: Prepare global parameters
        run: |
          echo "Preparing global parameters for ${{ steps.set-target.outputs.environment }} environment..."
          
          # Find the global parameters file (it has the dev factory name prefix)
          GLOBAL_PARAMS_FILE=$(find . -name "*_GlobalParameters.json" -type f | head -1)
          
          if [ -f "$GLOBAL_PARAMS_FILE" ]; then
            echo "Found global parameters file: $GLOBAL_PARAMS_FILE"
            echo "Original file content:"
            cat "$GLOBAL_PARAMS_FILE"
            
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "Updating parameters for production environment..."
              
              # Create production global parameters with proper type and value structure
              jq --arg storage_name "${{ secrets.STORAGE_NAME }}" \
                 --arg container_name "${{ secrets.CONTAINER_NAME }}" \
                 '.globalParameters.storage_name.value = $storage_name |
                  .globalParameters.container_name.value = $container_name |
                  .globalParameters.environment.value = "prod" |
                  # Ensure all parameters have type field if missing
                  .globalParameters = (.globalParameters | to_entries | map(
                    if .value | has("type") | not then
                      .value = {"type": "String", "value": .value.value}
                    else
                      .
                    end
                  ) | from_entries)' \
                  "$GLOBAL_PARAMS_FILE" > prod_global_params.json
              
              echo "Production global parameters:"
              cat prod_global_params.json
            else
              echo "Using development global parameters..."
              
              # Ensure dev parameters also have proper type structure
              jq '.globalParameters = (.globalParameters | to_entries | map(
                    if .value | has("type") | not then
                      .value = {"type": "String", "value": .value.value}
                    else
                      .
                    end
                  ) | from_entries)' \
                  "$GLOBAL_PARAMS_FILE" > dev_global_params.json
              
              echo "Development global parameters:"
              cat dev_global_params.json
            fi
          else
            echo "❌ No global parameters file found"
            ls -la
            exit 1
          fi

      - name: Install Azure Data Factory extension
        run: |
          az extension add --name datafactory --upgrade --only-show-errors

      - name: Deploy global parameters using REST API
        run: |
          echo "Deploying global parameters to ${{ steps.set-target.outputs.data_factory_name }}"
          
          # Determine which parameters file to use
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            PARAMS_FILE="prod_global_params.json"
          else
            PARAMS_FILE="dev_global_params.json"
          fi
          
          echo "Using parameters file: $PARAMS_FILE"
          
          # Validate the parameters file exists and is valid JSON
          if [ ! -f "$PARAMS_FILE" ]; then
            echo "❌ Parameters file not found: $PARAMS_FILE"
            exit 1
          fi
          
          if ! jq -e . >/dev/null 2>&1 < "$PARAMS_FILE"; then
            echo "❌ Invalid JSON in parameters file"
            cat "$PARAMS_FILE"
            exit 1
          fi
          
          # Extract just the globalParameters section
          GLOBAL_PARAMS=$(jq '.globalParameters' "$PARAMS_FILE")
          
          if [ "$GLOBAL_PARAMS" = "null" ] || [ -z "$GLOBAL_PARAMS" ]; then
            echo "❌ No globalParameters found in file"
            exit 1
          fi
          
          echo "Global parameters to deploy:"
          echo "$GLOBAL_PARAMS" | jq '.'
          
          # Get access token
          TOKEN=$(az account get-access-token --query accessToken -o tsv)
          
          if [ -z "$TOKEN" ]; then
            echo "❌ Failed to get access token"
            exit 1
          fi
          
          # Create the payload
          PAYLOAD=$(jq -n --argjson props "$GLOBAL_PARAMS" '{"properties": $props}')
          
          echo "Payload to send:"
          echo "$PAYLOAD" | jq '.'
          
          # Deploy using REST API
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
            "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/DataOps/providers/Microsoft.DataFactory/factories/${{ steps.set-target.outputs.data_factory_name }}/globalParameters/default?api-version=2018-06-01" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          
          # Extract HTTP status code
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "✅ Global parameters deployed successfully!"
          else
            echo "❌ Failed to deploy global parameters"
            echo "Response body: $RESPONSE_BODY"
            exit 1
          fi

      - name: Verify global parameters deployment
        run: |
          echo "Verifying global parameters in ${{ steps.set-target.outputs.data_factory_name }}"
          
          # Get current global parameters
          CURRENT_PARAMS=$(az datafactory factory show \
            --name ${{ steps.set-target.outputs.data_factory_name }} \
            --resource-group DataOps \
            --query "globalParameters" \
            --output json)
          
          echo "Current global parameters in target factory:"
          echo "$CURRENT_PARAMS" | jq '.'
          
          # Count parameters
          PARAM_COUNT=$(echo "$CURRENT_PARAMS" | jq '. | length')
          echo "Total parameters in target factory: $PARAM_COUNT"
